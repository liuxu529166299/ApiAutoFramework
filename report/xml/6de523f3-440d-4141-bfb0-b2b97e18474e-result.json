{"name": "test_get_commonapi[case2]", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting", "trace": "self = <test_case.test_case.TestCase object at 0x00000255CC35A820>\ncase = ['http://39.98.138.157:5000/api/getuserinfo', None, '{\"token\": \"$loginvar.token$\"}', 'get', 'url', '17890,admin,4321', ...]\n\n    @pytest.mark.parametrize(\"case\", excelData().get_excel_data())\n    def test_get_commonapi(self, case):\n        # print(case)\n        url = case[0]\n        body = case[1]\n        header = case[2]\n        method = case[3]\n        method_type = case[4]\n        expect = case[5]\n        jsonpaths = case[6]\n        dependency = case[7]\n    \n        print(url + \"-\" + str(body) + \"-\" + str(\n            header) + \"-\" + method + \"-\" + method_type + \"-\" + expect + \"-\" + jsonpaths + \"-\" + dependency)\n        common = operator_Common()\n        LoggerInfo().logger().info(\"替换body中的空格换行特殊字符开始。。。。\")\n        body = body.replace('\\r', '').replace('\\n', '').replace('\\t', '') if body is not None else \"\"\n        #\n        LoggerInfo().logger().info(\"转换存在可变变量开始。。。。\")\n        # 假如body中存在变量获取符号，调用convertBody重新对变量进行转化\n        body = operatorConvert().convertBody(body) if body.find('$') >= 0 else body\n        header = operatorConvert().convertBody(header) if (header is not None and header.find('$') >= 0) else header\n        header = \"\" if header is None else header\n        res = common.request(method, url, method_type, body, header)\n        #\n        # # 判断dependency是否有值需要存储\n        #\n        if len(res.content) > 0 and dependency.find('/') < 0:\n            depend[dependency] = res.content\n        # 获取请求返回值\n        resjson = json.loads(res.content)\n        #\n        # 判断是否有多个预期值断言\n        if jsonpaths.find(\",\") > 0:\n            # 切片预期值变成list\n            expect = expect.split(\",\")\n            # 切片jsonpath\n            jsonpaths = jsonpaths.split(\",\")\n            num = 0\n            assert_ex = []\n            for j in jsonpaths:\n                # 获得预期jsonpath路径下的值\n                result = jsonpath.jsonpath(resjson, expr=j)\n>               LoggerInfo().logger().info('解析json数据开始解析。。。',j)\n\ntest_case\\test_case.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1434: in info\n    self._log(INFO, msg, args, **kwargs)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1577: in _log\n    self.handle(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1587: in handle\n    self.callHandlers(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1649: in callHandlers\n    hdlr.handle(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:950: in handle\n    self.emit(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\_pytest\\logging.py:328: in emit\n    super().emit(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1089: in emit\n    self.handleError(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:1081: in emit\n    msg = self.format(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:925: in format\n    return fmt.format(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\_pytest\\logging.py:89: in format\n    return super().format(record)\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:664: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: logger, 20, F:\\pywork\\ApiAutoFramework\\test_case\\test_case.py, 61, \"解析json数据开始解析。。。\">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           TypeError: not all arguments converted during string formatting\n\nC:\\Users\\admin\\AppData\\Local\\Programs\\Python\\Python38\\lib\\logging\\__init__.py:369: TypeError"}, "attachments": [{"name": "log", "source": "84adc843-28a5-4627-92d9-dd4ca453d782-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "['http://39.98.138.157:5000/api/getuserinfo', None, '{\"token\": \"$loginvar.token$\"}', 'get', 'url', '17890,admin,4321', \"$.data[0]['userid'],$.data[0]['username'],$.data[0]['userpoints']\", 'uservar']"}], "start": 1606749274554, "stop": 1606749274640, "uuid": "1fa25814-ec1a-47c7-a297-756e8a876667", "historyId": "aedb2de88cdb602d9b743d2487904edd", "testCaseId": "f5edcad104c548e4aea2aac8fba300d1", "fullName": "test_case.test_case.TestCase#test_get_commonapi", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "DESKTOP-V3922JD"}, {"name": "thread", "value": "5884-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case"}]}